<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>socket on KungFu Developer</title>
    <link>https://www.kungfudev.com/tags/socket/</link>
    <description>Recent content in socket on KungFu Developer</description>
    <image>
      <url>https://www.kungfudev.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://www.kungfudev.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 30 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.kungfudev.com/tags/socket/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Optimizing Large File Transfers in Linux with Go - An Exploration of TCP and Syscall</title>
      <link>https://www.kungfudev.com/posts/optimizing-large-file-transfer-linux-go/</link>
      <pubDate>Mon, 30 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.kungfudev.com/posts/optimizing-large-file-transfer-linux-go/</guid>
      <description>As I experiment with Raspberry Pi and other devices in my network, I have created a small network application to aid in device discovery using multicast, data collection, and other functions.
One key feature of this application is the ability to download various data and metrics from some plugins weekly. With file sizes ranging from 200 MB to 250 MB after applying some compression, it&amp;rsquo;s essential to carefully consider some approaches for sending these files over TCP using Go.</description>
    </item>
    
    <item>
      <title>A simple example of using unix domain socket in Kubernetes</title>
      <link>https://www.kungfudev.com/posts/simple-example-of-using-unix-domain-socket-in-kubernetes/</link>
      <pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.kungfudev.com/posts/simple-example-of-using-unix-domain-socket-in-kubernetes/</guid>
      <description>In my previous post, Understanding Unix Domain Sockets in Golang, I mentioned that one potential use case for Unix domain sockets is to communicate between containers in Kubernetes. I received requests for an example of how to do this, so in this post, I&amp;rsquo;ll provide a simple example using two Go applications that you can find in this repository.
Using Unix domain sockets in Kubernetes can be an effective way to communicate containers within the same pod.</description>
    </item>
    
    <item>
      <title>Understanding Unix Domain Sockets in Golang</title>
      <link>https://www.kungfudev.com/posts/understanding-unix-domain-sockets-in-golang/</link>
      <pubDate>Mon, 05 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.kungfudev.com/posts/understanding-unix-domain-sockets-in-golang/</guid>
      <description>In Golang, a socket is a communication endpoint that allows a program to send and receive data over a network. There are two main types of sockets in Golang: Unix domain sockets (AF_UNIX) and network sockets (AF_INET|AF_INET6). This blog post will explore some differences between these two types of sockets.
Unix domain sockets, a.k.a., local sockets, are used for communication between processes on the same machine. They use a file-based interface and can be accessed using the file system path, just like regular files.</description>
    </item>
    
  </channel>
</rss>
