<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>heap on KungFu Dev</title>
    <link>https://kungfudev.com/tags/heap/</link>
    <description>Recent content in heap on KungFu Dev</description>
    <image>
      <url>https://kungfudev.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://kungfudev.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 21 Jul 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://kungfudev.com/tags/heap/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Implementation of Dijkstra using heap in Go</title>
      <link>https://kungfudev.com/posts/implementation-of-dijkstra-using-heap-in-go/</link>
      <pubDate>Sun, 21 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kungfudev.com/posts/implementation-of-dijkstra-using-heap-in-go/</guid>
      <description>Simple implementation of Dijkstra using heap in Go. What is Dijkstra? MEGA SHORT DESCRIPTION: Dijkstra&amp;rsquo;s algorithm to find the shortest path between a and b. It picks the unvisited node with the lowest distance, calculates the distance through it to each unvisited neighbor, and updates the neighbor&amp;rsquo;s distance if smaller.
  Mark all nodes unvisited. Create a set of all the unvisited nodes called the unvisited set, in our case we are going to use a set for visited nodes, not for unvisited nodes.</description>
    </item>
    
  </channel>
</rss>
